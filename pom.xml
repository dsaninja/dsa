<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.dsaninja</groupId>
    <artifactId>dsa</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <java.version>21</java.version>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <jcip.version>1.0</jcip.version>

        <logback.version>1.4.14</logback.version>

        <spock.core>2.4-M1-groovy-4.0</spock.core>
        <groovy.all>4.0.17</groovy.all>
        <bytebuddy.version>1.14.11</bytebuddy.version>
        <objenesis.version>3.3</objenesis.version>
        <junit.version>5.10.1</junit.version>
        <spock.reports>2.5.1-groovy-4.0</spock.reports>

        <gmavenplus.plugin>3.0.2</gmavenplus.plugin>
        <maven.surefire>3.2.5</maven.surefire>
        <jacoco.version>0.8.11</jacoco.version>

        <maven.compiler>3.12.1</maven.compiler>
    </properties>

    <dependencies>
        <!-- logging -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>

        <!-- runtime code injection -->
        <dependency>
            <groupId>net.bytebuddy</groupId>
            <artifactId>byte-buddy</artifactId>
            <version>${bytebuddy.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.objenesis</groupId>
            <artifactId>objenesis</artifactId>
            <version>${objenesis.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- to generate spock reports -->
        <dependency>
            <groupId>com.athaydes</groupId>
            <artifactId>spock-reports</artifactId>
            <version>${spock.reports}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>*</groupId>
                    <artifactId>*</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- for test cases/suits -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- spock framework to support gherkin pattern of testing -->
        <dependency>
            <groupId>org.spockframework</groupId>
            <artifactId>spock-core</artifactId>
            <version>${spock.core}</version>
            <scope>test</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.apache.groovy/groovy-all -->
        <dependency>
            <groupId>org.apache.groovy</groupId>
            <artifactId>groovy-all</artifactId>
            <version>${groovy.all}</version>
            <type>pom</type>
        </dependency>


        <!-- jcip annotations -->
        <dependency>
            <groupId>net.jcip</groupId>
            <artifactId>jcip-annotations</artifactId>
            <version>${jcip.version}</version>
            <scope>compile</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven.compiler}</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.gmavenplus</groupId>
                <artifactId>gmavenplus-plugin</artifactId>
                <version>${gmavenplus.plugin}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>addTestSources</goal>
                            <goal>compileTests</goal>
                        </goals>
                    </execution>
                </executions>
                <!-- refer to https://cloud.spring.io/spring-cloud-contract/spring-cloud-contract-maven-plugin/spock.html -->
                <configuration>
                    <!-- Failed to execute goal org.codehaus.gmavenplus:gmavenplus-plugin:3.0.2:compileTests
                    (default) on project dsa: Error occurred while calling a method on a Groovy class from
                    classpath.: InvocationTargetException: BUG! exception in phase 'semantic analysis' in source
                    unit '/Volumes/Data/dev/workspaces/dsaninja/dsa/src/test/groovy/com/dsaninja/algos/dp/BellmanFordSPSpec.groovy'

                    Unsupported class file major version 65 -> [Help 1] -->
                    <includeClasspath>PROJECT_AND_PLUGIN</includeClasspath>
                    <testSources>
                        <testSource>
                            <directory>${project.basedir}/src/test/groovy</directory>
                            <includes>
                                <include>**/*.groovy</include>
                            </includes>
                        </testSource>
                        <testSource>
                            <directory>${project.basedir}/src/test/java</directory>
                            <includes>
                                <include>**/*.java</include>
                            </includes>
                        </testSource>
                    </testSources>
                </configuration>

                <!-- Failed to execute goal org.codehaus.gmavenplus:gmavenplus-plugin:3.0.2:compileTests
                (default) on project dsa: Error occurred while calling a method on a Groovy class from
                classpath.: InvocationTargetException: BUG! exception in phase 'semantic analysis' in source
                unit '/Volumes/Data/dev/workspaces/dsaninja/dsa/src/test/groovy/com/dsaninja/algos/dp/BellmanFordSPSpec.groovy'

                Unsupported class file major version 65 -> [Help 1] -->
                <dependencies>
                    <dependency>
                        <groupId>org.apache.groovy</groupId>
                        <artifactId>groovy-all</artifactId>
                        <version>${groovy.all}</version>
                        <type>pom</type>
                    </dependency>
                </dependencies>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>${maven.surefire}</version>
                <configuration>
                    <argLine>@{argLine}</argLine>
                    <includes>
                        <include>**/*Spec.groovy</include>
                        <include>**/*.java</include>
                    </includes>
                    <systemProperties>
                        <com.athaydes.spockframework.report.showCodeBlocks>true</com.athaydes.spockframework.report.showCodeBlocks>
                        <com.athaydes.spockframework.report.outputDir>${user.dir}/target/spock-reports</com.athaydes.spockframework.report.outputDir>
                    </systemProperties>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>${jacoco.version}</version>

                <executions>
                    <!--
                        Prepares the property pointing to the JaCoCo runtime agent which
                        is passed as VM argument when Maven the Surefire plugin is executed.
                    -->
                    <execution>
                        <id>pre-unit-test-prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <destFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</destFile>
                            <!--
                                Sets the name of the property containing the settings
                                for JaCoCo runtime agent. This is optional as argLine is the
                                implicit property
                            -->
                            <propertyName>argLine</propertyName>
                        </configuration>
                    </execution>
                    <!--
                        Ensures that the code coverage report for unit tests is created after
                        unit tests have been run.
                    -->
                    <execution>
                        <id>post-unit-test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                        <configuration>
                            <!-- Sets the path to the file which contains the execution data. -->
                            <dataFile>${project.build.directory}/coverage-reports/jacoco-ut.exec</dataFile>
                            <!-- Sets the output directory for the code coverage report. -->
                            <outputDirectory>${project.reporting.outputDirectory}/jacoco</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>